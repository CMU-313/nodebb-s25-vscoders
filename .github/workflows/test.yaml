name: Lint and test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_call: # Usually called from deploy

defaults:
  run:
    shell: bash

permissions:
  checks: write  # for coverallsapp/github-action to create new checks
  contents: read  # for actions/checkout to fetch code

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TEST_ENV: 'production'
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Create .env file
        run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
        
      - name: Start services with Docker Compose
        run: |
          docker compose down
          docker compose --profile redis up --build -d

      - name: Setup for Redis in container
        run: docker compose exec -T nodebb node app --setup="${SETUP}" --ci="${CI}"
        env:
          SETUP: >-
            {
              "url": "http://127.0.0.1:4567/forum",
              "secret": "abcdef",
              "admin:username": "admin",
              "admin:email": "test@example.org",
              "admin:password": "hAN3Eg8W",
              "admin:password:confirm": "hAN3Eg8W",
              "database": "redis",
              "redis:host": "redis",
              "redis:port": 6379,
              "redis:password": "",
              "redis:database": 0
            }
          CI: >-
            {
              "host": "redis",
              "database": 1,
              "port": 6379
            }

      - name: Install test-only dependencies in container
        run: docker compose exec -T nodebb npm install --no-save nyc mocha

      - name: Run Node tests in container
        run: docker compose exec -T nodebb npm test

      - name: Stop Docker services
        run: docker compose down
        
  lint-Artillery-test:
      runs-on: ubuntu-latest
      env:
        TEST_ENV: 'production'
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
      services:
        redis:
          image: 'redis:7.2.4'
          options: >-
            --health-cmd "redis-cli ping"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          ports:
            - 6379:6379
  
      steps:
        - uses: actions/checkout@v4
  
        - run: cp install/package.json package.json
  
        - name: Install Node
          uses: actions/setup-node@v4
          with:
            node-version: 20
  
        - name: NPM Install
          uses: bahmutov/npm-install@v1
          with:
            useLockFile: false
  
        - name: Setup for Redis
          env:
            SETUP: >-
              {
                "url": "http://127.0.0.1:4567/forum",
                "secret": "abcdef",
                "admin:username": "admin",
                "admin:email": "test@example.org",
                "admin:password": "hAN3Eg8W",
                "admin:password:confirm": "hAN3Eg8W",
                "database": "redis",
                "redis:host": "127.0.0.1",
                "redis:port": 6379,
                "redis:password": "",
                "redis:database": 0
              }
            CI: >-
              {
                "host": "127.0.0.1",
                "database": 1,
                "port": 6379
              }
          run: |
            node app --setup="${SETUP}" --ci="${CI}"
  
        - name: Run ESLint
          run: npm run lint
  
        - name: Run Artillery Load Test
          run: |
              ./nodebb build
              ./nodebb start
              npx artillery run artillery-config.yml
              ./nodebb stop


            
  python-tests:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Ensure pytest and mock are in requirements.txt

      - name: Run Python tests
        run: pytest --junitxml=python-test-report.xml

      - name: Upload Python Test Report
        uses: actions/upload-artifact@v3
        with:
          name: python-test-reports
          path: python-test-report.xml
